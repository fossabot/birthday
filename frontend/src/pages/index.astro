---
import BaseLayout from '~layouts/BaseLayout.astro'
import { fetchBirthdayNotificationServer } from '~utils/backend'

const response = await fetchBirthdayNotificationServer('list')
const birthdayData: BirthdayData[] = await response.json()
---

<BaseLayout>
  <p id="clock">
    <span>1st January, 1970 00:00:00 AM</span>
  </p>
  <div class="birthday-content">
    <label for="birthday-select" class="birthday-select-label">Pilih nama</label
    >
    <select
      aria-labelledby="Pilih nama"
      name="birthday-select"
      id="birthday-select"
    >
      <option value="" selected disabled>Pilih nama</option>
      {
        birthdayData.map((data) => (
          <option value={btoa(JSON.stringify(data))}>{data.name}</option>
        ))
      }
    </select>
    <div class="selected-values">
      <p id="selected-dates">00/00/0000 &gt; 00/00/0000, 00/00/0000, ...</p>
      <p id="selected-distance">Next notification in NIL</p>
    </div>
    <div class="birthday-subscriptions">
      <button disabled id="subscribe-button">Subscribe</button>
      <button disabled id="unsubscribe-button">Unsubscribe</button>
    </div>
  </div>
</BaseLayout>

<script>
  import { format, formatDistance } from 'date-fns'

  import { fetchBirthdayNotificationServer } from '~utils/backend'
  import {
    addSubscription,
    hasSubscribedTo,
    removeSubscription,
  } from '~utils/subscription'
  import {
    askNotificationPermission,
    checkWebpushCompability,
    generateSubscriptionPayload,
  } from '~utils/webpush'

  let now: Date = new Date()
  const clock = document.getElementById('clock') as HTMLParagraphElement
  ;(function clockTick() {
    now = new Date()
    clock.querySelector('span')!.textContent = format(
      now,
      'do MMMM, yyyy hh:mm:ss a'
    )

    setTimeout(clockTick, 1000)
  })()

  const [birthdaySelect, subscribeButton, unsubscribeButton] = [
    document.getElementById('birthday-select') as HTMLSelectElement,
    document.getElementById('subscribe-button') as HTMLButtonElement,
    document.getElementById('unsubscribe-button') as HTMLButtonElement,
  ]

  let target: Record<'key' | 'name', string> | undefined
  const updateView = () => {
    const { date, key, month, name, year } = JSON.parse(
      atob(birthdaySelect.value)
    ) as BirthdayData

    target = { key, name }

    const hasSubscribed = hasSubscribedTo(key)
    subscribeButton.disabled = hasSubscribed
    unsubscribeButton.disabled = !hasSubscribed

    const currentYear = now.getFullYear()
    const currentMonth = now.getMonth() + 1
    const currentDate = now.getDate()

    const birthdayIsThisYear =
      currentMonth < month || (currentMonth === month && currentDate < date)

    const birthdayDate = new Date(
      birthdayIsThisYear ? currentYear : currentYear + 1,
      month - 1,
      date
    )

    const birthdayDates = Array.from({ length: 2 }, (_, index) =>
      format(
        new Date(
          birthdayDate.getFullYear() + index,
          birthdayDate.getMonth(),
          birthdayDate.getDate()
        ),
        'd/M/yyyy'
      )
    ).join(', ')

    const birthDate = format(new Date(year, month - 1, date), 'd/M/yyyy')
    document.getElementById(
      'selected-dates'
    )!.textContent = `${birthDate} > ${birthdayDates}, ...`

    const distance = formatDistance(birthdayDate, now, { addSuffix: true })
    document.getElementById(
      'selected-distance'
    )!.textContent = `Next notification ${distance}`
  }

  birthdaySelect.addEventListener('change', updateView)
  birthdaySelect.selectedIndex =
    1 + Math.floor(Math.random() * (birthdaySelect.options.length - 1))
  birthdaySelect.dispatchEvent(new Event('change'))

  subscribeButton.addEventListener('click', async () => {
    try {
      // disable user interaction while processing subscription
      birthdaySelect.disabled =
        subscribeButton.disabled =
        unsubscribeButton.disabled =
          true

      if (target === undefined) {
        throw new Error('You have not selected a target.')
      }

      checkWebpushCompability()
      const permission = await askNotificationPermission()
      if (permission !== 'granted') {
        throw new Error('Unable to get notification permission.')
      }

      const payload = await generateSubscriptionPayload(target.key)
      const response = await fetchBirthdayNotificationServer('subscribe', {
        body: JSON.stringify(payload),
        method: 'POST',
      })

      const text = await response.text()
      if (response.status === 201 && text.includes('SUBSCRIBED')) {
        addSubscription(target.key)
        alert(`Successfully subscribed to ${target.name}.`)
      } else {
        throw new Error(text)
      }
    } catch (error) {
      alert(error)
    } finally {
      birthdaySelect.disabled = false
      updateView()
    }
  })

  unsubscribeButton.addEventListener('click', async () => {
    try {
      if (target === undefined) {
        throw new Error('You have not selected a target.')
      }

      if (hasSubscribedTo(target.key)) {
        const payload = await generateSubscriptionPayload(target.key)
        const response = await fetchBirthdayNotificationServer('unsubscribe', {
          body: JSON.stringify(payload),
          method: 'POST',
        })

        const text = await response.text()
        if (response.status === 200 && text.includes('UNSUBSCRIBED')) {
          removeSubscription(target.key)
          alert(`Successfully unsubscribed from ${target.name}.`)
        } else {
          throw new Error(text)
        }
      }
    } catch (error) {
      alert(error)
    } finally {
      updateView()
    }
  })
</script>

<style>
  #clock {
    text-align: center;
    font-weight: 600;
  }

  .birthday-content {
    height: 80%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  .birthday-select-label {
    display: block;
  }

  .selected-values {
    text-align: center;
  }

  #birthday-select {
    background-color: var(--t-bg-color-alt);
    color: inherit;
    border: 1px solid currentColor;
    padding: 8px 6px;
    margin: 8px 0;
    border-radius: 8px;
    max-width: 350px;
    width: 100%;
  }

  #selected-dates {
    font-size: 1rem;
    font-weight: 600;
  }

  .birthday-subscriptions {
    width: 100%;
    max-width: 350px;
    display: flex;
    justify-content: space-evenly;
  }

  .birthday-subscriptions > button {
    background-color: var(--t-bg-color-alt);
    color: inherit;
    border: 1px solid currentColor;
    padding: 6px 8px;
  }

  .birthday-subscriptions > button:not([disabled]) {
    cursor: pointer;
  }

  .birthday-subscriptions > button:disabled {
    filter: opacity(0.7);
  }
</style>
